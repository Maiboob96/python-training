                                       Python Collections Module
_______________________________________________________________________________________________________________________

The collection Module in Python provides different types of containers. A Container is an object that is used to store different objects and provide a way to access the contained objects and iterate over them. 


(1)  Counters 
------------------------------------------------------------------------------------------------------

-> A counter is a sub-class of the dictionary. It is used to keep the count of the elements in an iterable in the form of an unordered dictionary where the key represents the element in the iterable 
and value represents the count of that element in the iterable.

Syntax:
      class collections.Counter([iterable-or-mapping])

Programs:
Exp 1:
# ways to create Counter
from collections import Counter

# With sequence of items
print(Counter(['B', 'B', 'A', 'B', 'C', 'A', 'B',
               'B', 'A', 'C']))

# with dictionary
print(Counter({'A': 3, 'B': 5, 'C': 2}))

# with keyword arguments
print(Counter(A=3, B=5, C=2))

Exp 2:

"""
# A Python program to demonstrate working
# of OrderedDict

from collections import OrderedDict

od = OrderedDict()
od['a'] = 1
od['b'] = 2
od['c'] = 3
od['d'] = 4

print('Before Deleting')
for key, value in od.items():
    print(key, value)

# deleting element
od.pop('a')

# Re-inserting the same
od['a'] = 1

print('\nAfter re-inserting')
for key, value in od.items():
    print(key, value)
    
    
    
(2) OrderedDict in Python
--------------------------------------------------------------------------------------------------------------

-> An OrderedDict is also a sub-class of dictionary but unlike dictionary, it remembers the order in which the keys were inserted. 

->An OrderedDict is a dictionary subclass that remembers the order that keys were first inserted. The only difference between dict() and OrderedDict() is that:

->OrderedDict preserves the order in which the keys are inserted. A regular dict doesnâ€™t track the insertion order and iterating it gives the values in an arbitrary order. 
By contrast, the order the items are inserted is remembered by OrderedDict.


Syntax:
       class collections.OrderDict()

Programs:
Exp 1:
# A Python program to demonstrate working of OrderedDict
from collections import OrderedDict

print("This is a Dict:\n")
d = {}
d['a'] = 1
d['b'] = 2
d['c'] = 3
d['d'] = 4

for key, value in d.items():
	print(key, value)

print("\nThis is an Ordered Dict:\n")
od = OrderedDict()
od['a'] = 1
od['b'] = 2
od['c'] = 3
od['d'] = 4

for key, value in od.items():
	print(key, value)


Exp 2:
# A Python program to demonstrate working of key
# value change in OrderedDict
from collections import OrderedDict

print("Before:\n")
od = OrderedDict()
od['a'] = 1
od['b'] = 2
od['c'] = 3
od['d'] = 4
for key, value in od.items():
	print(key, value)

print("\nAfter:\n")
od['c'] = 5
for key, value in od.items():
	print(key, value)


(3)  DefaultDict
-----------------------------------------------------------------------------------------------------------------------------

-> A DefaultDict is also a sub-class to dictionary. It is used to provide some default values for the key that does not exist and never raises a KeyError.

Syntax:
       defaultdict(default_factory)

Parameters:  default_factory: A function returning the default value for the dictionary defined. If this argument is absent then the dictionary raises a KeyError.

Programs:
----------------------------
Exp 1:
# dictionary

Dict = {1: 'jenkins', 2: 'docker', 3: 'ansible'}
print("Dictionary:")
print(Dict)
print(Dict[1])

# Uncommenting this print(Dict[4])
# will raise a KeyError as the
# 4 is not present in the dictionary

Exp 2:
# defaultdict

from collections import defaultdict

# Function to return a default
# values for keys that is not
# present
def def_value():
    return "Not Present"


# Defining the dict
d = defaultdict(def_value)
d["a"] = 1
d["b"] = 2

print(d["a"])
print(d["b"])
print(d["c"])


Exp3:
Exp 3:
from collections import defaultdict

# Function to return a default
# values for keys that is not
# present
def def_value():
    return "Not Present"


# Defining the dict
d = defaultdict(def_value)
d["a"] = 1
d["b"] = 2

print(d["a"])
print(d["b"])
print(d["c"])


(4) ChainMap
----------------------------------------------------------------------------------------------------------------------------
A ChainMap encapsulates many dictionaries into a single unit and returns a list of dictionaries.

Syntax:
       class collections.ChainMap(dict1, dict2)

Programs:
-----------------------------------
Exp1:
# ChainMap

from collections import ChainMap

d1 = {'a': 1, 'b': 2}
d2 = {'c': 3, 'd': 4}
d3 = {'e': 5, 'f': 6}

# Defining the chainmap
c = ChainMap(d1, d2, d3)

print(c)


Exp 2:
# ChainMap

from collections import ChainMap

d1 = {'a': 1, 'b': 2}
d2 = {'c': 3, 'd': 4}
d3 = {'e': 5, 'f': 6}

# Defining the chainmap
c = ChainMap(d1, d2, d3)

# Accessing Values using key name
print(c['a'])

# Accessing values using values()
# method
print(c.values())

# Accessing keys using keys()
# method
print(c.keys())


( 5) NamedTuple
-------------------------------------------------------------------------------------------------------------------------------------

-> A NamedTuple returns a tuple object with names for each position which the ordinary tuples lack.For example, 
consider a tuple names student where the first element represents fname, second represents lname and the third element represents the DOB.
Suppose for calling fname instead of remembering the index position you can actually call the element by using the fname argument, then it will be really easy for accessing tuples element.

Syntax:
      class collections.namedtuple(typename, field_names)

Programs:
-------------------------------
Exp 1:
import collections

Person = collections.namedtuple('Person', 'name age gender')

print('Type of Person:', type(Person))

bob = Person(name='Bob', age=30, gender='male')
print('\nRepresentation:', bob)

jane = Person(name='Jane', age=29, gender='female')
print('\nField by name:', jane.name)

print('\nFields by index:')
for p in [bob, jane]:
    print('%s is a %d year old %s' % p)


Exp 2:

import collections
Employee = collections.namedtuple('Employee',['name','age','designation'])
E = Employee('Alison','30','Software engineer')
print ("Demonstration using index, The Employee name is: ",E.name)
print ("Demonstration using keynames, The Employee age is : ",E[1])
print ("Demonstration using getattr(), The Employee designation is : ",getattr(E,'designation'))


(6)  Deque
------------------------------------------------------------------------------------------------------------------------------------------
-> Deque (Doubly Ended Queue) is the optimized list for quicker append and pop operations from both sides of the container. It provides O(1) time complexity for append and pop operations as compared to list with O(n) time complexity.

Syntax:
      class collections.deque(list)

Programs:
------------------------------------------
Exp 1:
# Python code to demonstrate deque

from collections import deque

# Declaring deque
queue = deque(['name', 'age', 'DOB'])

print(queue)

Exp 2:
# append(), appendleft()

from collections import deque

# initializing deque
de = deque([1, 2, 3])

# using append() to insert element at right end
# inserts 4 at the end of deque
de.append(4)

# printing modified deque
print("The deque after appending at right is : ")
print(de)

# using appendleft() to insert element at right end
# inserts 6 at the beginning of deque
de.appendleft(6)

# printing modified deque
print("The deque after appending at left is : ")
print(de)


(7) UserDict
----------------------------------------------------------------------------------------------------------------------

-> UserDict is a wrapper class that wraps the Dictionary structure around the storage object entities. By this, we tend to add customized behavior to the Dictionary. 
Also, it takes a dictionary object as input parameter and gets a dictionary structure built in the form of customized class being stored in the dictionary object.

Syntax:
      collections.UserDict(data)

Programs:

Exp1;
from collections import UserDict

info = {'Ronaldo': 30,
        'Messi': 35,
        'Beckham':40}

user_dict = UserDict(info)
print(user_dict.data)


Exp 2:
from collections import UserDict

class info(UserDict):
    def pop(self, s=None):
        raise RuntimeError ("Deletion not allowed")

myinfo = info({'A':00,'B':10})

print(myinfo)

#Deleting From Dict
myinfo.pop()

output:
  raise RuntimeError ("Deletion not allowed")
RuntimeError: Deletion not allowed
{'A': 0, 'B': 10}

(8) UserList
---------------------------------------------------------------------------------------------------------------
-> UserList is a list like container that acts as a wrapper around the list objects. This is useful when someone wants to create their own list with some modified or additional functionality.

Syntax:
      class collections.UserList([list])

Programs:

Exp1:
from collections import UserList

lst =[1,2]

user_list =UserList(lst)
print(user_list.data


Exp 2:
# userlist
from collections import UserList

class info(UserList):

    def pop(self,s =None):
        raise RuntimeError("Deletion not allowed")

myinfo = info([20,30,40])

myinfo.append(5)
print("Insertion...")
print(myinfo)

myinfo.pop()

(9) UserString
-------------------------------------------------------------------------------------------------------------------------------------------
-> UserString is a string like container and just like UserDict and UserList it acts as a wrapper around string objects. It is used when someone wants to create their own strings with some modified or additional functionality. 

Syntax:
      class collections.UserString(seq)


Programs:
---------------------------------------
Exp1:
from collections import UserString as US

P = 123546

# Here, we will create an UserDict
user_string = US(P)
print("UserString 1: ", user_string.data)
# Now, we will create an empty UserDict
user_string = US("")
print("UserString : ", user_string.data)


Exp2:

# userstring

from collections import UserString

# Creating a Mutable String
class Mystring(UserString):

    # Function to append to
    # string
    def append(self, s):
        self.data += s

    # Function to remove from
    # string
    def remove(self, s):
        self.data = self.data.replace(s, "")


# Driver's code
s1 = Mystring("python")
print("Original String:", s1.data)

# Appending to string
s1.append("s")
print("String After Appending:", s1.data)

# Removing from string
s1.remove("n")
print("String after Removing:", s1.data)


---------------------------------------------------------------------------------------------------------------------------






































