                              String Methods
____________________________________________________________________________________

Python string is a sequence of Unicode characters that is enclosed in the quotations marks. In this article, we will discuss the in-built function i.e. the functions provided by the Python to operate on strings. 

Note: Every string method does not change the original string instead returns a new string with the changed attributes. 

The below functions are used to change the case of the strings.
--------------------------------------------------------------------

lower(): Converts all uppercase characters in a string into lowercase
upper(): Converts all lowercase characters in a string into uppercase
title(): Convert string to title case

(1) string capitalize() 
----------------------------------------------------------------------------------------------------
In Python, the capitalize() method returns a copy of the original string and converts the first character of the string to a capital (uppercase) letter while making all other characters in the string lowercase letters.
 
Syntax: 
      string_name.capitalize() 

string_name: It is the name of string ofwhose first character we want to capitalize.

Parameter: The capitalize() function does not takes any parameter. 
Return value: The capitalize() function returns a string with the first character in the capital. 
Below is the python program to illustrate capitalize() function: 
 

Programms:
--------------------
Exp 1:
# use of capitalize() function

# capitalize() first letter of string
# and make other letters lowercase
name = "python PROGRAMMING language"

print(name.capitalize())

# demonstration of individual words
# capitalization to generate camel case
name1 = "python"
name2 = "programming"
name3 = "language"
print(name1.capitalize() + name2.capitalize()
      + name3.capitalize())

(2)  String casefold()
------------------------------------------------------------------------------------------------------------------------------------------------

Python String casefold() method is used to implement caseless string matching. It is similar to lower() string method but case removes all the case distinctions present in a string. i.e ignore cases when comparing. 

Syntax: 
      string.casefold()

Parameters:
The casefold() method doesn’t take any parameters.

Return value:
It returns the case folded string the string converted to lower case.


Programs:
------------------------
Exp 1:

# Python program to convert string in lower case
string = "PYTHONPROGRAMMS"

# print lowercase string
print("lowercase string: ", string.casefold())


Exp 2:
# Program to check if a string
#  is palindrome or not

# change this value for a different output
str = 'pythonprograms'

# make it suitable for caseless comparison
str = str.casefold()

# reverse the string
rev_str = reversed(str)

# check if the string is equal to its reverse
if str == rev_str:
    print("palindrome")
else:
    print("not palindrome")
    
(3) String center()
-----------------------------------------------------------------------------------------------------------------------------------
Python String center() method creates and returns a new string that is padded with the specified character. 

Syntax: 
      string.center(length[, fillchar])

Parameters:
length: length of the string after padding with the characters.
fillchar: (optional) characters which need to be padded. If it’s not provided, space is taken as the default argument.

Returns:
Returns a string padded with specified fillchar and it doesn’t modify the original string.


Programs:
------------------------------
Exp1 :
# string center() in python
string = "python java php"

new_string = string.center(24, '#')

# here fillchar is provided

print ("After padding String is:", new_string)

Exp 2:
# string center() in python
string = "python programming language"

new_string = string.center(24)

# here filchar not provided so takes space by default.
print("After padding String is: ", new_string)


(4)  String count():
-----------------------------------------------------------------------------------------------------------------------------------------------------------

Python String count() function is an inbuilt function in python programming language that returns the number of occurrences of a substring in the given string.

Syntax: 
      string.count(substring, start=…, end=…)

Parameters: 
The count() function has one compulsory and two optional parameters. 

Mandatory parameter: 
substring – string whose count is to be found.

Optional Parameters: 
start (Optional) – starting index within the string where the search starts. 
end (Optional) – ending index within the string where the search ends.

Return Value:
count() method returns an integer that denotes number of times a substring occurs in a given string. 

Programs:
Exp 1:

# count() method without optional parameters

# string in which occurrence will be checked
string = "python programming"

# counts the number of times substring occurs in
# the given string and returns an integer
print(string.count("python"))


(5)  Strings encode() :
----------------------------------------------------------------------------------------------------------------------------------------------

The encode() method encodes the string, using the specified encoding. If no encoding is specified, UTF-8 will be used.
Syntax:
       encode(encoding, error)

Parameter Values

Parameter	Description
encoding	Optional. A String specifying the encoding to use. Default is UTF-8
errors	        Optional. A String specifying the error method. Legal values are:
                'backslashreplace'	- uses a backslash instead of the character that could not be encoded
                'ignore'	          - ignores the characters that cannot be encoded
                'namereplace'	      - replaces the character with a text explaining the character
                'strict'	          - Default, raises an error on failure
                'replace'	          - replaces the character with a questionmark
                'xmlcharrefreplace'	- replaces the character with an xml character
                
Programs:
---------------------------
Exp 1:
# encode()

# initializing string
str = "pythonprograms"

# printing the encoded string
print ("The encoded string in utf8 format is : " ,)
print (str.encode('utf8', 'ignore'))

Exp 2:
# all encodings available

from encodings.aliases import aliases

# Printing list available
print("The available encodings are : ")
print(aliases.keys())


 


























